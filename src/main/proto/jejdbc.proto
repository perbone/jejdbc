/*
 * This file is part of JEJDBC 
 * https://github.com/perbone/jejdbc/
 * 
 * Copyright 2013-2017 Paulo Perbone
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License
 */

/**
 * @author Paulo Perbone <pauloperbone@yahoo.com>
 * @since 0.1.0
 */

syntax = "proto3";

package jejdbc;

import "google/protobuf/timestamp.proto";

/* Java specific settings */
option java_multiple_files = true;
option java_package = "io.perbone.jejdbc.grpc";
option java_outer_classname = "JeJdbc";

// jejdbc.proto must be optimized for speed
option optimize_for = SPEED;

// Messages definition

/**
 * The replication node state determines the operations that the 
 * application can perform against its replicated environment. 
 * The method getState returns the current state.
 */
enum NodeState {

	/**
	 * The node is not associated with the group. Its handle has been
	 * closed. No operations can be performed on the environment when it is
	 * in this state.
	 */
	DETACHED = 0;
	
	/**
	 * The node is not currently in contact with the master, but is actively
	 * trying to establish contact with, or decide upon, a master. While in
	 * this state the node is restricted to performing just read operations
	 * on its environment. In a functioning group, this state is
	 * transitory.
	 */
	UNKNOWN = 1;
	
	/**
	 * The node is the unique master of the group and can both read and
	 * write to its environment. When the node transitions to the
	 * state, the application running on the node must make provisions to
	 * start processing application level write requests in addition to
	 * read requests.
	 */
	MASTER = 2;
	
	/**
	 * The node is a replica that is being updated by the master. It is
	 * restricted to reading its environment. When the node
	 * transitions to this state, the application running on the node must
	 * make provisions to ensure that it does not write to the
	 * environment. It must arrange for all write requests to be routed to
	 * the master.
	 */
	REPLICA = 3;
}

message StateRequest {
    bool fullState = 1;
}

message StateResponse {
    NodeState state = 1;
}

service MonitorService {
    rpc GetState (StateRequest) returns (StateResponse) {}
}
